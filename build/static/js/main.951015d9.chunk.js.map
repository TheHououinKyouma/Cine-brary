{"version":3,"sources":["axios.js","Row.jsx","request.js","Banner.jsx","Nav.jsx","App.jsx","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setmovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","path","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Api_key","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setmovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.951015d9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance =axios.create({\r\n  baseURL:\"https://api.themoviedb.org/3\"\r\n});\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const getImage = (path) => `https://image.tmdb.org/t/p/w500/${path}`;\n\n  const [movies, setmovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n\n      setmovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      //\"https://developers.google.com/youtube/player_parameters\",\n      autoplay: 1,\n    },\n  };\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>{\" \"}\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterlarge\"}`}\n            src={getImage(isLargeRow ? movie.poster_path : movie.backdrop_path)}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const Api_key = \"cabb87c8153e5b29cd062e923e51506c\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${Api_key}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${Api_key}&with_newtworks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${Api_key}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${Api_key}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${Api_key}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${Api_key}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${Api_key}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${Api_key}&with_genres=99`,\n};\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./request\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  //const getImage = (path) => `https://image.tmdb.org/t/p/w500/${path}`;\n  const [movie, setmovie] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setmovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n  console.log(movie);\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(https://image.tmdb.org/t/p/w500/${movie?.backdrop_path})`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner_content\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">List</button>\n        </div>\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n      </div>\n      <div className=\"banner--fadebottom\"></div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else {\n        handleShow(false);\n      }\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src=\"https://image.tmdb.org/t/p/original/wwemzKWzjKYJFfCeiB57q3r4Bcm.svg\"\n        alt=\"Netflix-logo\"\n      />\n      <img\n        className=\"nav_avatar\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\n        alt=\"avatar\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./request\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n\n      <Row\n        title=\"NETFLIX ORGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romantic Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}